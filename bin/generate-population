#!/bin/bash

set -x

###################################################################
###################################################################
##    
##    
## Command line interface for interacting with RTI synthetic
## population and associated PUMS (census) data.
##
## usage:
##    
##    import:
##
##          ./generate-population --import
##
##    export:
##
##          ./generate-population --export
##
## confiugration:
##          
##    data_home: directory in which the synthetic population
##               files are stored.
##
##    input_files: files to be imported. 
##
##
###################################################################

# Configure environment

configure_system () {
    
    DATABASE=pop.db

    APP_HOME=~/dev/
    data_home=/cygdrive/c/dev/rti/syntheticpopulation
    data_home=~/dev/var/crcsim/rti/syntheticpopulation/

    input_files="
2005_2009_ver1_37_synth_people.txt 
2005_2009_ver1_37_synth_households.txt 
2005_2009_ver1_37_pums_p.txt"
    
    unset subset
    unset tables
    unset cygwin
    
    if [ "$(uname -o)" == 'Cygwin' ]
    then 
	cygwin=true
    fi
}

# Utilities

get_fields () {
    local input=$1
    echo " $(head -1 $input | sed -e 's/,/ varchar\(10\)\n,/g' ) varchar(10) "
}

execute_sql () {
    sqlite3 $DATABASE <<SQL_ENTRY_TAG_1
$1
SQL_ENTRY_TAG_1
}

drop_tables () {
    for table in $*; do
	execute_sql "drop table $table;"
    done
}

create_table () {
    local input=$1
    local table=$2
    fields="$(get_fields $input)"
    sql="create table $table ($fields);"
    execute_sql "$sql"
}

load_data () {
    local input=$1
    if [ ! -z $cygwin ]; then
	input=$(cygpath -w $1)
    fi
    local table=$2
    cat > ${table}-loader.txt <<EOF
.mode csv
.schema $table
.import '$input' $table
EOF
    sqlite3 $DATABASE ".read ${table}-loader.txt" > ${table}-loader.log
}

create_and_load () {
    local input=$1
    local table=$2
    create_table $input $table
    load_data $input $table
}    

# Import tables

import_tables () {
    for file in $input_files; do
	table=$(echo $file | sed -e "s,pums_,pums,g" | sed -e "s,.*_,," -e "s,.txt,,")
	table="$table:${data_home}/$file"
	tables="$tables $table"
    done
    
    drop_tables people households pumsp
    
    for table in $tables; do
	input=$(echo $table | sed -e "s,:, ," | awk '{ print $2 }')
	table=$(echo $table | sed -e "s,:, ," | awk '{ print $1 }')
	create_and_load $input $table
    done
}

# Export a population

export_data () {
    echo "people.sex|people.race|households.hh_income|people.age|households.hh_size|households.latitude|households.longitude|pumsp.hisp|pumsp.schl|pumsp.semp|pumsp.rac1p"
    execute_sql "
  select people.sex,
         people.race,
         households.hh_income,
         people.age,
         households.hh_size,
         households.latitude,
         households.longitude,
         pumsp.hisp,
         pumsp.schl,
         pumsp.semp,
         pumsp.rac1p
  from people,
       households,
       pumsp
  where people.hh_id    == households.hh_id
    and people.serialno == pumsp.serialno
    and people.pernum   == pumsp.sporder;
"
}

install_data () {
    mkdir -p $APP_HOME/var/crcsim

    cd $APP_HOME/var/crcsim
    if [ ! -d census2010 ]; then
	wget -O- http://www.renci.org/~scox/crc/data/crcsim-data-1.0.tar.gz | tar xvzf - 
    fi

    cd census2010
    if [ ! -f tl_2010_37_county10.dbf ]; then
	for z in $(ls *.zip); do
	    unzip $z
	done
    fi

    cd ../rti/syntheticpopulation
    if [ ! -f 2005_2009_ver1_37_synth_people.txt ]; then
	for z in $(ls *.zip); do
	    unzip $z
	done
    fi

    cd $APP_HOME/crcsim/
    database=$APP_HOME/var/crcsim/generated/population.db
    exportFile=$APP_HOME/var/crcsim/generated/syntheticpopulation.out
    if [ ! -f $database ]; then
	$0 --database=$database --import
    fi
    if [ ! -f $exportFile ]; then
	$0 --database=$database --export > $exportFile
    fi

    cd $APP_HOME/crcsim
    mvn --settings=conf/settings.xml
}

usage () {
    echo "$0 [ --import | --export ]"
    exit 1
}

getarg () {
    echo $1 | sed s,.*=,,
}

main () {

	configure_system

	for arg in $*; do
	    case $arg in
		--database\=*)
		    DATABASE=$(getarg $arg)
		    ;;
		'--import')
		    import_tables
		    ;;
		'--export')
		    export_data
		    ;;
		'--install')
		    install_data
		    ;;
		*)
		    usage 
		    ;;
	    esac
	done
}

main $*